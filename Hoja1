import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import scipy.stats as stats
from scipy.stats import shapiro

movies = pd.read_csv("movies.csv", encoding='cp1252')
des = movies.transpose()

movies['releaseDate'] = pd.to_datetime(movies['releaseDate'], errors='coerce')

#Ejercicio 4.6

movies = pd.read_csv("movies.csv", encoding='cp1252')
des = movies.transpose()

fechas = movies.sort_values(by = 'releaseDate', ascending = True)

VF = fechas.tail(20)

graf = sns.countplot(x = 'genres', data = VF)
plt.xticks(rotation= 90)
plt.tight_layout()
plt.show()

#Ejercicio 4.7

MG = list(movies['genres'].value_counts().head(15).index)
GP = movies[['genres', 'revenue']]
GP = GP[GP.genres.isin(MG)]
R = []

for i in MG:
	R.append(GP.loc[(GP['genres'] == i), 'revenue'].sum())

df = pd.DataFrame(list(zip(MG, R)), columns = ['Género','Ganancias'])
print(df)
R.clear()

df = df.sort_values(by = 'Ganancias', ascending = True)

#Ejercicio 4.8

#Verficar normalidad
estadistico1, p_value1 = stats.kstest(movies['actorsAmount'], 'norm')
estadistico2, p_value2 = stats.kstest(movies['revenue'], 'norm')



print("Cantidad de Actores:",  'Estadístico= %.3f, p_value=%.3f' % (estadistico1, p_value1))
print("Ingresos:",  'Estadístico= %.3f, p_value=%.3f' % (estadistico2, p_value2))


Contaminacion = movies.corr(method = 'spearman')
r, p = stats.spearmanr(movies['actorsAmount'], movies['revenue'])
print(f"Correlación Spearman: r={r}, p-value={p}")

año = movies[['releaseDate', 'actorsAmount']]

m = año.groupby(año['releaseDate'].dt.year).mean()
print(m)

graph = m.plot(kind = 'bar')
plt.tight_layout()
plt.show()


#Ejercicio 4.9

Co = movies[['castWomenAmount', 'castMenAmount', 'revenue', 'popularity']]
a, b = Co.shape

for i in range(0, a):
	
	for k in range(0, b):
		
		if (isinstance(Co.iloc[i,k], str) == True):
			try:
  				Co.loc[i,k] = np.float64(Co.iloc[i,k])
			except:
  				Co.loc[i,k] = np.float64(0)

correlation_mat = Co.corr()
print(correlation_mat)

sns.heatmap(correlation_mat, annot = True)

plt.show()

#Ejercicio 4.10
CM = movies[['voteAvg', 'director']]
CM = CM.sort_values(by = 'voteAvg', ascending = True)
CM = CM.tail(20)

graf = sns.countplot(x = 'director', data = CM)
plt.xticks(rotation= 90)
plt.tight_layout()
plt.show()


